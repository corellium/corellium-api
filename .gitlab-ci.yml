include:
  - project: infrastructure/gitlab_shared_ci
    file: Sonarqube.gitlab-ci.yml

stages:
  - test
  - publish

test:
  image: node:lts
  stage: test
  script: 
    - npm ci
    - npm run test:ci

release-publish:
  image:
    name: git.corellium.co:5050/corellium/ci/docker/nodejs:16
    pull_policy: [always, if-not-present]
  stage: publish
  before_script:
    # Configure npmrc to publish to npm registry
    - echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > .npmrc
  script:
    # Attempt to parse commit tag of format release/vX.X.X
    - RELEASE_VERSION=${CI_COMMIT_TAG#release/v}
    - |
      if [[ -z "$RELEASE_VERSION" ]]; then
        echo "Error: Failed to parse release version from tag ${CI_COMMIT_TAG}"
        exit 1
      fi
    - LAST_TAG="$(git describe --tags --abbrev=0 HEAD~1)"
    - echo "Version parsed $RELEASE_VERSION"
    - NOTES="$(git log ${LAST_TAG}..${CI_COMMIT_TAG} --oneline --no-notes | sed -e 's/^/  - /')"
    - jq ".version = \"${RELEASE_VERSION}\"" package.json > temp.json
    - mv temp.json package.json
    - jq . package.json
    - npm publish
    - |
      PAYLOAD=$(jq -n \
      --arg tag "$CI_COMMIT_TAG" \
      --arg name "Release v$RELEASE_VERSION" \
      --arg body "$NOTES" \
      '{tag_name: $tag, name: $name, body: $body}')
    - |
      curl -X POST \
      -H "Authorization: token ${GITHUB_AUTH_TOKEN}" \
      -H "Content-Type: application/json" \
      -d "$PAYLOAD" \
      https://api.github.com/repos/corellium/corellium-api/releases
  only:
    - /release\/v*/

local-publish:
  image:
    name: git.corellium.co:5050/corellium/ci/docker/nodejs:16
    pull_policy: [always, if-not-present]
  stage: publish
  before_script:
    # Configure the registry URL and authentication to publish to GitLab registry
    - echo "//git.corellium.co/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" > .npmrc
    - echo "@corellium:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" >> .npmrc
  script:
    # Attempt to parse a version number from the tag
    - PKG_VERSION="$(echo ${CI_COMMIT_TAG} | sed -n 's/.*v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')"
    - |
      if [[ -z "$PKG_VERSION" ]]; then
        echo "Error: Failed to parse version from tag ${CI_COMMIT_TAG}"
        exit 1
      fi
    - echo "Version parsed $PKG_VERSION"
    # Update package.json with provided version number and publish
    - jq ".version = \"${PKG_VERSION}\"" package.json > temp.json
    - mv temp.json package.json
    - jq . package.json
    - npm publish
  only:
    - tags